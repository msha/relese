---
import PageShell from '../layouts/PageShell.astro';
import CurrentVersionHero from '../components/CurrentVersionHero.astro';
import ReleaseCard from '../components/ReleaseCard.astro';
import StickyOutline from '../islands/StickyOutline.tsx';
import { getTranslations } from '../i18n/utils.js';
import { loadReleases, getCurrentVersion, getUniqueVersions } from '../data/utils.js';
import type { Locale } from '../types/index.js';

// Get locale from cookie or default to 'en'
const cookies = Astro.request.headers.get('cookie') || '';
const cookieMatch = cookies.match(/locale=([^;]+)/);
const cookieLocale = cookieMatch ? cookieMatch[1] : null;

let locale: Locale = 'en'; // default

if (cookieLocale && ['en', 'fi'].includes(cookieLocale)) {
  locale = cookieLocale as Locale;
}


// Load translations and data
const translations = await getTranslations(locale);
const releases = await loadReleases();
const currentVersion = getCurrentVersion(releases);
const availableVersions = getUniqueVersions(releases);

// Skip current version from the list for release cards
const otherReleases = releases.slice(1);

const pageTitle = translations.page.title;
const pageDescription = translations.page.subtitle;
---

<PageShell
  title={pageTitle}
  description={pageDescription}
  locale={locale}
  translations={translations}
>
  <!-- Sticky Outline Navigation (sidebar) -->
  <nav class="outline-nav" aria-label={translations.navigation.outline}>
    <StickyOutline
      client:load
      releases={releases}
      translations={translations}
      availableVersions={availableVersions}
    />
  </nav>

  <!-- Main Content Area -->
  <div class="content-area">
    <!-- Current Version Hero -->
    {currentVersion && (
      <CurrentVersionHero
        release={currentVersion}
        translations={translations}
        locale={locale}
      />
    )}

    <!-- Release History -->
    <section class="releases-section" aria-label="Release history">
      <div class="releases-list" id="releases-list">
        {otherReleases.map((release, index) => (
          <ReleaseCard
            release={release}
            translations={translations}
            locale={locale}
            isAlternating={index % 2 === 1}
          />
        ))}
      </div>

      <!-- Empty State (hidden by default, shown by filter island when needed) -->
      <div class="empty-state" id="empty-state" style="display: none;">
        <div class="empty-state__content glass">
          <div class="empty-state__icon" aria-hidden="true">üîç</div>
          <h3 class="empty-state__title">{translations.states.empty}</h3>
          <p class="empty-state__description">
            {translations.states.emptyDescription}
          </p>
          <button type="button" class="empty-state__action" id="clear-filters-empty">
            {translations.filters.clearAll}
          </button>
        </div>
      </div>
    </section>
  </div>
</PageShell>

<style>
  .outline-nav {
    position: absolute;
    left: calc(-1 * var(--outline-width) - var(--spacing-2xl));
    top: var(--spacing-xl);
    width: var(--outline-width);
    height: fit-content;
    z-index: var(--z-sticky);
    pointer-events: auto;
  }

  .content-area {
    position: relative;
    min-height: 100vh;
  }


  .releases-section {
    position: relative;
  }

  .releases-list {
    display: flex;
    flex-direction: column;
    gap: 0; /* Gap is handled by the components themselves */
  }

  /* Empty State Styling */
  .empty-state {
    display: flex;
    align-items: center;
    justify-content: center;
    min-height: 400px;
    margin: var(--spacing-2xl) 0;
  }

  .empty-state__content {
    text-align: center;
    padding: var(--spacing-2xl);
    border-radius: var(--radius-xl);
    max-width: 400px;
  }

  .empty-state__icon {
    font-size: 3rem;
    margin-bottom: var(--spacing-lg);
    opacity: 0.7;
  }

  .empty-state__title {
    font-size: var(--font-size-xl);
    font-weight: var(--font-weight-bold);
    color: var(--text-primary);
    margin: 0 0 var(--spacing-md) 0;
  }

  .empty-state__description {
    font-size: var(--font-size-base);
    color: var(--text-secondary);
    margin: 0 0 var(--spacing-xl) 0;
    line-height: var(--line-height-relaxed);
  }

  .empty-state__action {
    background: var(--accent-purple);
    border: none;
    border-radius: var(--radius-md);
    padding: var(--spacing-md) var(--spacing-xl);
    color: white;
    font-size: var(--font-size-base);
    font-weight: var(--font-weight-medium);
    font-family: var(--font-family);
    cursor: pointer;
    transition: all var(--transition-fast);
  }

  .empty-state__action:hover {
    background: color-mix(in srgb, var(--accent-purple) 90%, white);
    box-shadow: 0 8px 16px rgba(139, 92, 246, 0.3);
  }

  .empty-state__action:focus {
    outline: 2px solid var(--accent-purple);
    outline-offset: 2px;
  }

  /* Responsive Design */
  @media (max-width: 1024px) {
    .outline-nav {
      position: relative;
      left: auto;
      top: auto;
      width: 100%;
      max-width: 100%;
      margin-bottom: var(--spacing-xl);
    }
  }

  @media (max-width: 768px) {
    .empty-state {
      min-height: 300px;
      margin: var(--spacing-xl) 0;
    }

    .empty-state__content {
      padding: var(--spacing-xl);
    }

    .empty-state__icon {
      font-size: 2rem;
    }

    .empty-state__title {
      font-size: var(--font-size-lg);
    }

    .empty-state__description {
      font-size: var(--font-size-sm);
    }
  }

  /* Loading state for releases */
  .releases-list[data-loading="true"] {
    opacity: 0.6;
    pointer-events: none;
  }

  /* Smooth transitions for filter changes */
  .releases-list {
    transition: opacity var(--transition-normal);
  }

  /* High contrast mode */
  @media (prefers-contrast: high) {
    .empty-state__action {
      border: 2px solid white;
    }
  }
</style>

<script>
  // Client-side script for handling filter interactions and empty state
  document.addEventListener('DOMContentLoaded', () => {
    const clearFiltersButton = document.getElementById('clear-filters-empty');

    if (clearFiltersButton) {
      clearFiltersButton.addEventListener('click', () => {
        // Dispatch custom event to clear filters
        const clearEvent = new CustomEvent('clearFilters' as any);
        document.dispatchEvent(clearEvent as any);
      });
    }

    // Listen for filter changes from FilterPanel
    document.addEventListener('filtersChanged' as any, (event: any) => {
      const { hasResults } = event.detail;
      const emptyState = document.getElementById('empty-state');
      const releasesList = document.getElementById('releases-list');

      if (emptyState && releasesList) {
        if (!hasResults) {
          emptyState.style.display = 'flex';
          releasesList.style.display = 'none';
        } else {
          emptyState.style.display = 'none';
          releasesList.style.display = 'flex';
        }
      }
    });

    // Listen for loading state changes
    document.addEventListener('loadingChanged' as any, (event: any) => {
      const { isLoading } = event.detail;
      const releasesList = document.getElementById('releases-list');

      if (releasesList) {
        if (isLoading) {
          releasesList.setAttribute('data-loading', 'true');
        } else {
          releasesList.removeAttribute('data-loading');
        }
      }
    });

    // Compute container left for sticky alignment and handle sticky behavior
    const getContainerLeft = () => {
      const container = document.querySelector('.main__container');
      if (!container) return 0;
      const rect = (container as HTMLElement).getBoundingClientRect();
      return rect.left + window.scrollX;
    };

    const setContainerLeftVar = () => {
      if (window.innerWidth < 1024) return;
      const leftPx = getContainerLeft();
      document.documentElement.style.setProperty('--container-left', leftPx + 'px');
    };

    const handleStickyOutline = () => {
      const outline = document.querySelector('.sticky-outline--desktop');
      const heroSection = document.querySelector('.content-area section:first-child');

      if (outline && heroSection && window.innerWidth >= 1024) {
        const heroTop = (heroSection as HTMLElement).getBoundingClientRect().top;
        const shouldBeSticky = heroTop <= 0;

        if (shouldBeSticky) {
          (outline as HTMLElement).classList.add('sticky-outline--sticky');
        } else {
          (outline as HTMLElement).classList.remove('sticky-outline--sticky');
        }
      }
    };

    // Initial check and scroll listener
    setContainerLeftVar();
    handleStickyOutline();
    window.addEventListener('scroll', () => { setContainerLeftVar(); handleStickyOutline(); });
    window.addEventListener('resize', () => { setContainerLeftVar(); handleStickyOutline(); });
  });
</script>
