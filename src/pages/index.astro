---
import PageShell from '../layouts/PageShell.astro';
import CurrentVersionHero from '../components/CurrentVersionHero.astro';
import ReleaseCard from '../components/ReleaseCard.astro';
import FilterPanel from '../islands/FilterPanel.tsx';
import StickyOutline from '../islands/StickyOutline.tsx';
import { getTranslations } from '../i18n/utils.js';
import { loadReleases, getCurrentVersion, getUniqueVersions } from '../data/utils.js';
import type { Locale } from '../types/index.js';

// Get locale from URL or default to 'en'
const locale: Locale = 'en'; // TODO: Implement locale detection from URL

// Load translations and data
const translations = await getTranslations(locale);
const releases = await loadReleases();
const currentVersion = getCurrentVersion(releases);
const availableVersions = getUniqueVersions(releases);

// Skip current version from the list for release cards
const otherReleases = releases.slice(1);

const pageTitle = translations.page.title;
const pageDescription = translations.page.subtitle;
---

<PageShell
  title={pageTitle}
  description={pageDescription}
  locale={locale}
  translations={translations}
>
  <!-- Sticky Outline for Navigation -->
  <nav class="outline-nav" aria-label={translations.navigation.outline}>
    <StickyOutline
      client:load
      releases={releases}
      translations={translations}
    />
  </nav>

  <!-- Main Content Area -->
  <div class="content-area">
    <!-- Filter Panel -->
    <section class="filter-section" aria-label="Release filters">
      <FilterPanel
        client:idle
        availableVersions={availableVersions}
        translations={translations}
        isLoading={false}
      />
    </section>

    <!-- Current Version Hero -->
    {currentVersion && (
      <CurrentVersionHero
        release={currentVersion}
        translations={translations}
        locale={locale}
      />
    )}

    <!-- Release History -->
    <section class="releases-section" aria-label="Release history">
      <div class="releases-list" id="releases-list">
        {otherReleases.map((release, index) => (
          <ReleaseCard
            key={release.version}
            release={release}
            translations={translations}
            locale={locale}
            isAlternating={index % 2 === 1}
          />
        ))}
      </div>

      <!-- Empty State (hidden by default, shown by filter island when needed) -->
      <div class="empty-state" id="empty-state" style="display: none;">
        <div class="empty-state__content glass">
          <div class="empty-state__icon" aria-hidden="true">üîç</div>
          <h3 class="empty-state__title">{translations.states.empty}</h3>
          <p class="empty-state__description">
            Try adjusting your filters to see more releases.
          </p>
          <button type="button" class="empty-state__action" id="clear-filters-empty">
            {translations.filters.clearAll}
          </button>
        </div>
      </div>
    </section>
  </div>
</PageShell>

<style>
  .outline-nav {
    grid-column: 1;
    position: relative;
  }

  .content-area {
    grid-column: 2;
    position: relative;
    min-height: 100vh;
  }

  .filter-section {
    margin-bottom: var(--spacing-2xl);
  }

  .releases-section {
    position: relative;
  }

  .releases-list {
    display: flex;
    flex-direction: column;
    gap: 0; /* Gap is handled by the components themselves */
  }

  /* Empty State Styling */
  .empty-state {
    display: flex;
    align-items: center;
    justify-content: center;
    min-height: 400px;
    margin: var(--spacing-2xl) 0;
  }

  .empty-state__content {
    text-align: center;
    padding: var(--spacing-2xl);
    border-radius: var(--radius-xl);
    max-width: 400px;
  }

  .empty-state__icon {
    font-size: 3rem;
    margin-bottom: var(--spacing-lg);
    opacity: 0.7;
  }

  .empty-state__title {
    font-size: var(--font-size-xl);
    font-weight: var(--font-weight-bold);
    color: var(--text-primary);
    margin: 0 0 var(--spacing-md) 0;
  }

  .empty-state__description {
    font-size: var(--font-size-base);
    color: var(--text-secondary);
    margin: 0 0 var(--spacing-xl) 0;
    line-height: var(--line-height-relaxed);
  }

  .empty-state__action {
    background: var(--accent-purple);
    border: none;
    border-radius: var(--radius-md);
    padding: var(--spacing-md) var(--spacing-xl);
    color: white;
    font-size: var(--font-size-base);
    font-weight: var(--font-weight-medium);
    font-family: var(--font-family);
    cursor: pointer;
    transition: all var(--transition-fast);
  }

  .empty-state__action:hover {
    background: color-mix(in srgb, var(--accent-purple) 90%, white);
    transform: translateY(-2px);
    box-shadow: 0 8px 16px rgba(139, 92, 246, 0.3);
  }

  .empty-state__action:focus {
    outline: 2px solid var(--accent-purple);
    outline-offset: 2px;
  }

  /* Responsive Design */
  @media (max-width: 1024px) {
    .outline-nav {
      grid-column: 1 / -1;
      margin-bottom: var(--spacing-xl);
    }

    .content-area {
      grid-column: 1 / -1;
    }
  }

  @media (max-width: 768px) {
    .filter-section {
      margin-bottom: var(--spacing-xl);
    }

    .empty-state {
      min-height: 300px;
      margin: var(--spacing-xl) 0;
    }

    .empty-state__content {
      padding: var(--spacing-xl);
    }

    .empty-state__icon {
      font-size: 2rem;
    }

    .empty-state__title {
      font-size: var(--font-size-lg);
    }

    .empty-state__description {
      font-size: var(--font-size-sm);
    }
  }

  /* Loading state for releases */
  .releases-list[data-loading="true"] {
    opacity: 0.6;
    pointer-events: none;
  }

  /* Smooth transitions for filter changes */
  .releases-list {
    transition: opacity var(--transition-normal);
  }

  /* High contrast mode */
  @media (prefers-contrast: high) {
    .empty-state__action {
      border: 2px solid white;
    }
  }
</style>

<script>
  // Client-side script for handling filter interactions and empty state
  document.addEventListener('DOMContentLoaded', () => {
    const clearFiltersButton = document.getElementById('clear-filters-empty');

    if (clearFiltersButton) {
      clearFiltersButton.addEventListener('click', () => {
        // Dispatch custom event to clear filters
        const clearEvent = new CustomEvent('clearFilters');
        document.dispatchEvent(clearEvent);
      });
    }

    // Listen for filter changes from FilterPanel
    document.addEventListener('filtersChanged', (event: CustomEvent) => {
      const { hasResults } = event.detail;
      const emptyState = document.getElementById('empty-state');
      const releasesList = document.getElementById('releases-list');

      if (emptyState && releasesList) {
        if (!hasResults) {
          emptyState.style.display = 'flex';
          releasesList.style.display = 'none';
        } else {
          emptyState.style.display = 'none';
          releasesList.style.display = 'flex';
        }
      }
    });

    // Listen for loading state changes
    document.addEventListener('loadingChanged', (event: CustomEvent) => {
      const { isLoading } = event.detail;
      const releasesList = document.getElementById('releases-list');

      if (releasesList) {
        if (isLoading) {
          releasesList.setAttribute('data-loading', 'true');
        } else {
          releasesList.removeAttribute('data-loading');
        }
      }
    });
  });
</script>
